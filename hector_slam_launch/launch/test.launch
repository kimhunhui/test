<!--
    ROS navigation stack with velocity smoother and safety (reactive) controller
-->
<launch>
  <!--<include file="$(find quadrotor_navigation)/launch/includes/velocity_smoother.launch.xml"/>-->
  <!--<include file="$(find quadrotor_navigation)/launch/includes/safety_controller.launch.xml"/>-->
  <arg name="geotiff_map_file_path" default="$(find hector_geotiff)/maps"/>
  <param name="/use_sim_time" value="false"/>

  <include file="$(find hector_slam_launch)/launch/localization.launch"/>

  <node pkg="rviz" type="rviz" name="rviz"
    args="-d $(find hector_slam_launch)/rviz_cfg/mapping_demo.rviz"/>

  <include file="$(find hector_mapping)/launch/mapping_2.launch"/>
  <include file="$(find hector_imu_attitude_to_tf)/launch/example.launch"/>
  <include file="$(find hector_slam_launch)/launch/map_server.launch"/>
  <include file="$(find hector_geotiff_launch)/launch/geotiff_mapper.launch">
    <arg name="trajectory_source_frame_name" value="scanmatcher_frame"/>
    <arg name="map_file_path" value="$(arg geotiff_map_file_path)"/>
  </include>

<node pkg="tf" type="static_transform_publisher" name="map_to_odom_broadcaster" args="0 0 0 0 0 0 map odom 10"/>
<node pkg="tf" type="static_transform_publisher" name="odom_to_base_footprint_broadcaster" args="0 0 0 0 0 0 odom base_footprint 10"/>
<node pkg="tf" type="static_transform_publisher" name="base_footprint_to_base_link_broadcaster" args="0 0 0 0 0 0 base_footprint base_link 10"/>
<node pkg="tf" type="static_transform_publisher" name="base_link_to_laser_broadcaster" args="0 0 0 0 0 0 base_link laser 10" />

  <!--<arg name="odom_frame_id"   default="world"/>-->
  <arg name="odom_frame_id"   default="odom"/>
  <arg name="base_frame_id"   default="base_link"/>
  <arg name="global_frame_id" default="map"/>
  <!--<arg name="odom_topic" default="/ground_truth/state" />-->
  <arg name="odom_topic" default="/bebop/odom" />
  <arg name="laser_topic" default="/scan" />
  <arg name="custom_param_file" default="$(find hector_slam_launch)/config/dummy.yaml"/>

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find hector_slam_launch)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find hector_slam_launch)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find hector_slam_launch)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find hector_slam_launch)/config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find hector_slam_launch)/config/dwa_local_planner_params.yaml" command="load" />
    <rosparam file="$(find hector_slam_launch)/config/move_base_params.yaml" command="load" />
    <rosparam file="$(find hector_slam_launch)/config/global_planner_params.yaml" command="load" />
    <rosparam file="$(find hector_slam_launch)/config/navfn_global_planner_params.yaml" command="load" />
    <!-- external params file that could be loaded into the move_base namespace -->


    <!-- reset frame_id parameters using user input data -->
    <param name="global_costmap/global_frame" value="map"/>
    <param name="global_costmap/robot_base_frame" value="base_link"/>
    <param name="local_costmap/global_frame" value="odom"/>
    <param name="local_costmap/robot_base_frame" value="base_link"/>
    <param name="DWAPlannerROS/global_frame_id" value="odom"/>

    <remap from="cmd_vel" to="/bebop/cmd_vel"/>
    <remap from="odom" to="/bebop/odom"/>
    <remap from="scan" to="/scan"/>
    <param name="move_base/DWAPlannerROS/yaw_goal_tolerance" value="1.0"/>
    <param name="move_base/DWAPlannerROS/xy_goal_tolerance" value="1.0"/>
  </node>

<node pkg="hector_slam_launch" type="go_to_point.py" name="go_to_point" />
<node pkg="hector_slam_launch" type="ros_odometry_publisher_example.py" name="odometry_publisher" />

</launch>
